// Prisma schema for Aliado MVP
// ------------------------------------------------------------
//  - Postgres database (Supabase)
//  - Generator outputs Prisma Client
//  - Category model replaces ServiceCategory enum
//  - Provider <-> Category many-to-many relation
//  - Complaint one-to-many relation
//  - Request & Lead allow tracking user inquiries and provider leads
// ------------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DATABASE_URL")
}

// Categories of services, stored as separate records to avoid accents in enums
model Category {
  id          String     @id @default(uuid())
  slug        String     @unique // ascii-only key e.g. "servicios-de-plomeria"
  displayName String     @db.VarChar(100) // human-friendly name with accents
  providers   Provider[] @relation("ProviderCategories")
}

model Provider {
  id         String   @id @default(uuid())
  dni        String   @db.VarChar(8)
  firstName  String   @db.VarChar(50)
  lastName   String   @db.VarChar(50)
  district   String   @db.VarChar(50)
  phone      String   @db.VarChar(20)
  rating     Float    @default(5.0)
  complaints Int      @default(0)
  createdAt  DateTime @default(now())

  // relations
  categories     Category[]  @relation("ProviderCategories")
  complaintsList Complaint[]
  leads          Lead[]
}

model Complaint {
  id         String   @id @default(uuid())
  providerId String
  userPhone  String   @db.VarChar(20)
  message    String
  createdAt  DateTime @default(now())

  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
}

model Request {
  id           String   @id @default(uuid())
  userPhone    String   @db.VarChar(20)
  rawText      String
  categorySlug String?  @db.VarChar(100) // store the slug of the classified category
  district     String?
  createdAt    DateTime @default(now())

  leads Lead[]
}

model Lead {
  id          String   @id @default(uuid())
  requestId   String
  providerId  String
  deliveredAt DateTime @default(now())
  contacted   Boolean  @default(false)

  request  Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([providerId])
}
